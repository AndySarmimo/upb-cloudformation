
AWSTemplateFormatVersion : '2010-09-09'
Transform:
    - AWS::Serverless-2016-10-31
    
Description: Lambda Cloudformation
Resources: 
  #Get movies option 1
  GetMovie:
    Type: AWS::Serverless::Function
    Properties:
        FunctionName: getMovie
        Handler: movie.getMovie
        Runtime: python3.6
        CodeUri: package/
        #Role: !GetAtt MyLambdaRole.Arn
        Policies:
          - DynamoDBReadPolicy:
              TableName: !Ref MoviesTable
        Environment:
          Variables:
            MOVIES_TABLE: !Ref MoviesTable
        Events:
            GetUsers:
              Type: Api
              Properties:
                RestApiId: !Ref MyAPI
                Path: "/movies/{movie_id}"
                Method: GET
  PutMovie:
    Type: AWS::Serverless::Function
    Properties:
        FunctionName: putMovie
        Handler: movie.putMovie
        Runtime: python3.6
        CodeUri: package/
        Policies:
          - DynamoDBWritePolicy:
              TableName: !Ref MoviesTable
        #Role: !GetAtt MyLambdaRole.Arn
        Environment:
          Variables:
            MOVIES_TABLE: !Ref MoviesTable
        Events:
            GetMovies:
              Type: Api
              Properties:
                RestApiId: !Ref MyAPI
                Path: "/movies/{movie_id}"
                Method: PUT
  RoomsPerDay:
    Type: AWS::Serverless::Function
    Properties:
        FunctionName: roomsPerDay
        Handler: movie.roomsPerDay
        Runtime: python3.6
        CodeUri: package/
        #Role: !GetAtt MyLambdaRole.Arn
        Policies:
          - DynamoDBReadPolicy:
              TableName: !Ref MoviesTable
        Environment:
          Variables:
            MOVIES_TABLE: !Ref MoviesTable
        Events:
            GetMovies:
              Type: Api
              Properties:
                RestApiId: !Ref MyAPI
                Path: "/roomsPerDay/movies/{movie_id}"
                Method: GET
  PeopleAttending:
    Type: AWS::Serverless::Function
    Properties:
        FunctionName: peopleAttending
        Handler: movie.peopleAttending
        Runtime: python3.6
        CodeUri: package/
        #Role: !GetAtt MyLambdaRole.Arn
        Policies:
          - DynamoDBReadPolicy:
              TableName: !Ref MoviesTable
        Environment:
          Variables:
            MOVIES_TABLE: !Ref MoviesTable
        Events:
            GetUsers:
              Type: Api
              Properties:
                RestApiId: !Ref MyAPI
                Path: "/peopleAttending/movies/{movie_id}/rooms/{room_id}"
                Method: GET
  GetRoom:
    Type: AWS::Serverless::Function
    Properties:
        FunctionName: getRoom
        Handler: movie.getRoom
        Runtime: python3.6
        CodeUri: package/
        #Role: !GetAtt MyLambdaRole.Arn
        Policies:
          - DynamoDBReadPolicy:
              TableName: !Ref MoviesTable
        Environment:
          Variables:
            MOVIES_TABLE: !Ref MoviesTable
        Events:
            GetUsers:
              Type: Api
              Properties:
                RestApiId: !Ref MyAPI
                Path: "/rooms/{room_id}"
                Method: GET
  PutPeopleRoom:
    Type: AWS::Serverless::Function
    Properties:
        FunctionName: putPeopleRoom
        Handler: movie.putPeopleRoom
        Runtime: python3.6
        CodeUri: package/
        Policies:
          - DynamoDBReadPolicy:
              TableName: !Ref MoviesTable
          - DynamoDBWritePolicy:
              TableName: !Ref MoviesTable
        #Role: !GetAtt MyLambdaRole.Arn
        Environment:
          Variables:
            MOVIES_TABLE: !Ref MoviesTable
        Events:
            GetMovies:
              Type: Api
              Properties:
                RestApiId: !Ref MyAPI
                Path: "putPeopleRoom/rooms/{room_id}"
                Method: PUT
  GetPerson:
    Type: AWS::Serverless::Function
    Properties:
        FunctionName: getPerson
        Handler: movie.getPerson
        Runtime: python3.6
        CodeUri: package/
        #Role: !GetAtt MyLambdaRole.Arn
        Policies:
          - DynamoDBReadPolicy:
              TableName: !Ref MoviesTable
        Environment:
          Variables:
            MOVIES_TABLE: !Ref MoviesTable
        Events:
            GetUsers:
              Type: Api
              Properties:
                RestApiId: !Ref MyAPI
                Path: "/watched/people/{person_id}"
                Method: GET
  
                
  MyAPI:
      Type: AWS::Serverless::Api
      Properties:
        Name: user-api
        StageName: prod
        DefinitionBody:
          Fn::Transform:
            Name: AWS::Include
            Parameters:
              Location: swagger.yaml
                   
    
        

  MoviesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: movies-table
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
            